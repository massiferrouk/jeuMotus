{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\luminy\\\\MotusJeu\\\\frontend\\\\src\\\\components\\\\Game\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport Confetti from 'react-confetti';\nimport Lottie from 'react-lottie';\nimport * as animationData from '../../animation/looseanimation.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [word, setWord] = useState('');\n  const [attempts, setAttempts] = useState(Array(6).fill(''));\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const [currentRow, setCurrentRow] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [showLottie, setShowLottie] = useState(false);\n  const [score, setScore] = useState(0);\n  const [scoreMessage, setScoreMessage] = useState('');\n  const navigate = useNavigate();\n  const difficulty = localStorage.getItem('difficulty') || 'easy'; // Récupérer la difficulté \n  const token = localStorage.getItem('token');\n\n  // Ref pour toutes les cases de la grille\n  const inputRefs = useRef([]);\n  const formRef = useRef(null);\n  useEffect(() => {\n    const fetchWord = async () => {\n      try {\n        const res = await axios.get('http://localhost:5001/api/random-word', {\n          params: {\n            difficulty\n          }\n        });\n        console.log('API response:', res.data); // Log the response data\n        const fetchedWord = res.data.word.toLowerCase();\n        setWord(fetchedWord);\n        // Initialiser la première lettre pour chaque ligne\n        const initialAttempts = Array(6).fill(fetchedWord.charAt(0));\n        setAttempts(initialAttempts);\n      } catch (err) {\n        console.error('Error fetching word:', err);\n        setError('Failed to fetch the word.');\n      }\n    };\n    fetchWord();\n  }, [difficulty]);\n  useEffect(() => {\n    const fetchScore = async () => {\n      try {\n        const res = await axios.get('http://localhost:5000/api/game/score', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setScore(res.data.score);\n      } catch (err) {\n        console.error('Error fetching score:', err);\n      }\n    };\n    fetchScore();\n  }, [token]);\n  const handleInputChange = (e, rowIndex, colIndex) => {\n    const value = e.target.value.toLowerCase();\n    if (value.length > 1) return; // Allow only one character\n    const newAttempts = attempts.slice();\n    newAttempts[rowIndex] = newAttempts[rowIndex].split('');\n    newAttempts[rowIndex][colIndex] = value;\n    newAttempts[rowIndex] = newAttempts[rowIndex].join('');\n    setAttempts(newAttempts);\n\n    // Déplacer le focus vers la case suivante si une lettre est entrée\n    const nextIndex = colIndex + 1;\n    if (nextIndex < word.length && value) {\n      inputRefs.current[rowIndex][nextIndex].focus();\n    }\n  };\n  const handleKeyDown = (e, rowIndex, colIndex) => {\n    if (e.key === 'Enter') {\n      handleSubmit(e);\n    } else if (e.key === 'Backspace' && colIndex > 0) {\n      const newAttempts = attempts.slice();\n      newAttempts[rowIndex] = newAttempts[rowIndex].split('');\n      newAttempts[rowIndex][colIndex] = '';\n      newAttempts[rowIndex] = newAttempts[rowIndex].join('');\n      setAttempts(newAttempts);\n      const prevIndex = colIndex - 1;\n      inputRefs.current[rowIndex][prevIndex].focus();\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const currentAttempt = attempts[currentRow];\n    if (currentAttempt.length !== word.length) return;\n    let points = 0;\n    if (currentAttempt === word) {\n      setMessage('Congratulations! You guessed the word!');\n      setGameOver(true);\n      setShowConfetti(true);\n      points = 10; // Ajoutez 10 points pour avoir trouvé le mot\n    } else if (currentRow >= 5) {\n      setMessage(`Game over! The word was ${word}`);\n      setGameOver(true);\n      setShowLottie(true);\n      setTimeout(() => setShowLottie(false), 5000); // Fermer l'animation après 5 secondes\n      points = 1; // Ajoutez 1 point pour avoir essayé\n    } else {\n      setCurrentRow(currentRow + 1);\n      // Déplacer le focus vers la première colonne de la ligne suivante\n      setTimeout(() => {\n        inputRefs.current[currentRow + 1][1].focus();\n      }, 100);\n      return;\n    }\n    await updateScore(points);\n\n    // Utiliser une fonction pour garantir la mise à jour correcte\n    setScore(prevScore => {\n      const newScore = prevScore + points;\n      setScoreMessage(`Votre score est <span class=\"text-red-500 font-bold text-2xl\">${newScore}</span>`);\n      return newScore;\n    });\n  };\n  const updateScore = async points => {\n    const token = localStorage.getItem('token');\n    try {\n      await axios.post('http://localhost:5000/api/game/score', {\n        points\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    } catch (error) {\n      console.error('Error updating score:', error);\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleSubmit]);\n  const getLetterClass = (letter, index, rowIndex) => {\n    const correctWordCounts = {};\n    const attemptCounts = new Array(word.length).fill(0);\n    const correctFlags = new Array(word.length).fill(false); // Flags for correct positions\n\n    // Compter les occurrences de chaque lettre dans le mot cible\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!correctWordCounts[char]) {\n        correctWordCounts[char] = 0;\n      }\n      correctWordCounts[char]++;\n    }\n\n    // Marquer les lettres correctes (rouges) et les compter\n    for (let i = 0; i < word.length; i++) {\n      const char = attempts[rowIndex][i];\n      if (word[i] === char) {\n        correctFlags[i] = true;\n        correctWordCounts[char]--;\n      }\n    }\n\n    // Marquer les lettres présentes mais mal placées (jaunes)\n    for (let i = 0; i < word.length; i++) {\n      const char = attempts[rowIndex][i];\n      if (!correctFlags[i] && word.includes(char) && correctWordCounts[char] > 0) {\n        attemptCounts[i] = 1; // Jaune\n        correctWordCounts[char]--;\n      }\n    }\n\n    // Si la lettre est correcte (rouge)\n    if (correctFlags[index]) {\n      return 'bg-red-500 text-white';\n    }\n\n    // Si la lettre est dans le mot mais mal placée (jaune)\n    if (attemptCounts[index] === 1) {\n      return 'bg-yellow-500 text-white';\n    }\n\n    // Sinon, marquez en bleu (lettre incorrecte ou excédentaire)\n    return 'bg-blue-500 text-white';\n  };\n  const renderRow = (attempt, rowIndex) => {\n    const letters = attempt.split('').concat(Array(word.length - attempt.length).fill(''));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center gap-2\",\n      children: letters.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        maxLength: \"1\",\n        value: letter,\n        onChange: e => handleInputChange(e, rowIndex, colIndex),\n        onKeyDown: e => handleKeyDown(e, rowIndex, colIndex),\n        className: `w-12 h-12 text-center border border-gray-300 rounded-lg text-lg font-bold lowercase transition-all duration-300 ease-in-out transform ${rowIndex < currentRow || gameOver ? getLetterClass(letter, colIndex, rowIndex) : ''}`,\n        disabled: rowIndex !== currentRow || gameOver,\n        ref: el => inputRefs.current[rowIndex] ? inputRefs.current[rowIndex][colIndex] = el : inputRefs.current[rowIndex] = {\n          [colIndex]: el\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  };\n  const handleRestart = () => {\n    navigate('/difficulty'); // Rediriger vers la page de sélection de difficulté\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center min-h-screen bg-gray-100\",\n    children: [showConfetti && /*#__PURE__*/_jsxDEV(Confetti, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 24\n    }, this), showLottie && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\",\n      onClick: () => setShowLottie(false),\n      children: /*#__PURE__*/_jsxDEV(Lottie, {\n        options: {\n          loop: false,\n          autoplay: true,\n          animationData: animationData,\n          rendererSettings: {\n            preserveAspectRatio: 'xMidYMid slice'\n          }\n        },\n        height: 400,\n        width: 700\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-14 py-6 text-center bg-white rounded shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl font-bold mb-4\",\n        children: \"Motus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `mb-4 ${message.startsWith('Congratulations') ? 'text-green-500' : 'text-red-500'} text-2xl font-semibold`,\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), scoreMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-4 text-2xl font-semibold\",\n        dangerouslySetInnerHTML: {\n          __html: scoreMessage\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-4 font-semibold text-xl\",\n        children: [\"Le mot \\xE0 deviner commence par : \", word && word.charAt(0)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid gap-2 justify-center\",\n        children: attempts.map((attempt, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-2\",\n          children: renderRow(attempt, rowIndex)\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        className: \"mt-4 px-4 py-2 bg-green-500 hover:bg-green-700 text-white font-semibold rounded\",\n        children: \"Recommencer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"RdZ0E8pA8Lsp9RMEWAQGiWdYLkI=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useNavigate","Confetti","Lottie","animationData","jsxDEV","_jsxDEV","Game","_s","word","setWord","attempts","setAttempts","Array","fill","error","setError","message","setMessage","currentRow","setCurrentRow","gameOver","setGameOver","showConfetti","setShowConfetti","showLottie","setShowLottie","score","setScore","scoreMessage","setScoreMessage","navigate","difficulty","localStorage","getItem","token","inputRefs","formRef","fetchWord","res","get","params","console","log","data","fetchedWord","toLowerCase","initialAttempts","charAt","err","fetchScore","headers","Authorization","handleInputChange","e","rowIndex","colIndex","value","target","length","newAttempts","slice","split","join","nextIndex","current","focus","handleKeyDown","key","handleSubmit","prevIndex","preventDefault","currentAttempt","points","setTimeout","updateScore","prevScore","newScore","post","window","addEventListener","removeEventListener","getLetterClass","letter","index","correctWordCounts","attemptCounts","correctFlags","i","char","includes","renderRow","attempt","letters","concat","className","children","map","type","maxLength","onChange","onKeyDown","disabled","ref","el","fileName","_jsxFileName","lineNumber","columnNumber","handleRestart","onClick","options","loop","autoplay","rendererSettings","preserveAspectRatio","height","width","startsWith","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Users/Utilisateur/luminy/MotusJeu/frontend/src/components/Game/Game.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Confetti from 'react-confetti';\r\nimport Lottie from 'react-lottie';\r\nimport * as animationData from '../../animation/looseanimation.json';\r\n\r\nconst Game = () => {\r\n  const [word, setWord] = useState('');\r\n  const [attempts, setAttempts] = useState(Array(6).fill(''));\r\n  const [error, setError] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [currentRow, setCurrentRow] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [showConfetti, setShowConfetti] = useState(false);\r\n  const [showLottie, setShowLottie] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [scoreMessage, setScoreMessage] = useState('');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const difficulty = localStorage.getItem('difficulty') || 'easy'; // Récupérer la difficulté \r\n  const token = localStorage.getItem('token');\r\n\r\n  // Ref pour toutes les cases de la grille\r\n  const inputRefs = useRef([]);\r\n  const formRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetchWord = async () => {\r\n      try {\r\n        const res = await axios.get('http://localhost:5001/api/random-word', {\r\n          params: { difficulty },\r\n        });\r\n        console.log('API response:', res.data); // Log the response data\r\n        const fetchedWord = res.data.word.toLowerCase();\r\n        setWord(fetchedWord);\r\n        // Initialiser la première lettre pour chaque ligne\r\n        const initialAttempts = Array(6).fill(fetchedWord.charAt(0));\r\n        setAttempts(initialAttempts);\r\n      } catch (err) {\r\n        console.error('Error fetching word:', err);\r\n        setError('Failed to fetch the word.');\r\n      }\r\n    };\r\n\r\n    fetchWord();\r\n  }, [difficulty]);\r\n\r\n  useEffect(() => {\r\n    const fetchScore = async () => {\r\n      try {\r\n        const res = await axios.get('http://localhost:5000/api/game/score', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n        setScore(res.data.score);\r\n      } catch (err) {\r\n        console.error('Error fetching score:', err);\r\n      }\r\n    };\r\n  \r\n    fetchScore();\r\n  }, [token]);\r\n\r\n  const handleInputChange = (e, rowIndex, colIndex) => {\r\n    const value = e.target.value.toLowerCase();\r\n    if (value.length > 1) return; // Allow only one character\r\n    const newAttempts = attempts.slice();\r\n    newAttempts[rowIndex] = newAttempts[rowIndex].split('');\r\n    newAttempts[rowIndex][colIndex] = value;\r\n    newAttempts[rowIndex] = newAttempts[rowIndex].join('');\r\n    setAttempts(newAttempts);\r\n\r\n    // Déplacer le focus vers la case suivante si une lettre est entrée\r\n    const nextIndex = colIndex + 1;\r\n    if (nextIndex < word.length && value) {\r\n      inputRefs.current[rowIndex][nextIndex].focus();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e, rowIndex, colIndex) => {\r\n    if (e.key === 'Enter') {\r\n      handleSubmit(e);\r\n    } else if (e.key === 'Backspace' && colIndex > 0) {\r\n      const newAttempts = attempts.slice();\r\n      newAttempts[rowIndex] = newAttempts[rowIndex].split('');\r\n      newAttempts[rowIndex][colIndex] = '';\r\n      newAttempts[rowIndex] = newAttempts[rowIndex].join('');\r\n      setAttempts(newAttempts);\r\n\r\n      const prevIndex = colIndex - 1;\r\n      inputRefs.current[rowIndex][prevIndex].focus();\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const currentAttempt = attempts[currentRow];\r\n    if (currentAttempt.length !== word.length) return;\r\n\r\n    let points = 0;\r\n\r\n    if (currentAttempt === word) {\r\n      setMessage('Congratulations! You guessed the word!');\r\n      setGameOver(true);\r\n      setShowConfetti(true);\r\n      points = 10; // Ajoutez 10 points pour avoir trouvé le mot\r\n    } else if (currentRow >= 5) {\r\n      setMessage(`Game over! The word was ${word}`);\r\n      setGameOver(true);\r\n      setShowLottie(true);\r\n      setTimeout(() => setShowLottie(false), 5000); // Fermer l'animation après 5 secondes\r\n      points = 1; // Ajoutez 1 point pour avoir essayé\r\n    } else {\r\n      setCurrentRow(currentRow + 1);\r\n      // Déplacer le focus vers la première colonne de la ligne suivante\r\n      setTimeout(() => {\r\n        inputRefs.current[currentRow + 1][1].focus();\r\n      }, 100);\r\n      return\r\n    }\r\n\r\n    await updateScore(points);\r\n\r\n    // Utiliser une fonction pour garantir la mise à jour correcte\r\n    setScore(prevScore => {\r\n      const newScore = prevScore + points;\r\n      setScoreMessage(`Votre score est <span class=\"text-red-500 font-bold text-2xl\">${newScore}</span>`);\r\n      return newScore;\r\n    });\r\n  };\r\n\r\n  const updateScore = async (points) => {\r\n    const token = localStorage.getItem('token');\r\n    try {\r\n      await axios.post('http://localhost:5000/api/game/score', { points }, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating score:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [handleSubmit]);\r\n\r\n  const getLetterClass = (letter, index, rowIndex) => {\r\n  \r\n    const correctWordCounts = {};\r\n    const attemptCounts = new Array(word.length).fill(0);\r\n    const correctFlags = new Array(word.length).fill(false); // Flags for correct positions\r\n  \r\n    // Compter les occurrences de chaque lettre dans le mot cible\r\n    for (let i = 0; i < word.length; i++) {\r\n      const char = word[i];\r\n      if (!correctWordCounts[char]) {\r\n        correctWordCounts[char] = 0;\r\n      }\r\n      correctWordCounts[char]++;\r\n    }\r\n  \r\n    // Marquer les lettres correctes (rouges) et les compter\r\n    for (let i = 0; i < word.length; i++) {\r\n      const char = attempts[rowIndex][i];\r\n      if (word[i] === char) {\r\n        correctFlags[i] = true;\r\n        correctWordCounts[char]--;\r\n      }\r\n    }\r\n  \r\n    // Marquer les lettres présentes mais mal placées (jaunes)\r\n    for (let i = 0; i < word.length; i++) {\r\n      const char = attempts[rowIndex][i];\r\n      if (!correctFlags[i] && word.includes(char) && correctWordCounts[char] > 0) {\r\n        attemptCounts[i] = 1; // Jaune\r\n        correctWordCounts[char]--;\r\n      }\r\n    }\r\n  \r\n    // Si la lettre est correcte (rouge)\r\n    if (correctFlags[index]) {\r\n      return 'bg-red-500 text-white';\r\n    }\r\n  \r\n    // Si la lettre est dans le mot mais mal placée (jaune)\r\n    if (attemptCounts[index] === 1) {\r\n      return 'bg-yellow-500 text-white';\r\n    }\r\n  \r\n    // Sinon, marquez en bleu (lettre incorrecte ou excédentaire)\r\n    return 'bg-blue-500 text-white';\r\n  };\r\n  \r\n\r\n  const renderRow = (attempt, rowIndex) => {\r\n    const letters = attempt.split('').concat(Array(word.length - attempt.length).fill(''));\r\n    return (\r\n      <div key={rowIndex} className=\"flex justify-center gap-2\">\r\n        {letters.map((letter, colIndex) => (\r\n          <input\r\n            key={colIndex}\r\n            type=\"text\"\r\n            maxLength=\"1\"\r\n            value={letter}\r\n            onChange={(e) => handleInputChange(e, rowIndex, colIndex)}\r\n            onKeyDown={(e) => handleKeyDown(e, rowIndex, colIndex)}\r\n            className={`w-12 h-12 text-center border border-gray-300 rounded-lg text-lg font-bold lowercase transition-all duration-300 ease-in-out transform ${rowIndex < currentRow || gameOver ? getLetterClass(letter, colIndex, rowIndex) : ''}`}\r\n            disabled={rowIndex !== currentRow || gameOver}\r\n            ref={el => inputRefs.current[rowIndex] ? inputRefs.current[rowIndex][colIndex] = el : inputRefs.current[rowIndex] = { [colIndex]: el }}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    navigate('/difficulty'); // Rediriger vers la page de sélection de difficulté\r\n  };\r\n\r\n  if (error) {\r\n    return <p className=\"text-red-500\">{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div className='flex items-center justify-center min-h-screen bg-gray-100'>\r\n      {showConfetti && <Confetti />}\r\n      {showLottie && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\" onClick={() => setShowLottie(false)}>\r\n          <Lottie options={{\r\n            loop: false,\r\n            autoplay: true,\r\n            animationData: animationData,\r\n            rendererSettings: {\r\n              preserveAspectRatio: 'xMidYMid slice'\r\n            }\r\n          }}\r\n            height={400}\r\n            width={700}\r\n          />\r\n        </div>\r\n      )}\r\n      <div className=\"px-14 py-6 text-center bg-white rounded shadow-lg\">\r\n        <h1 className=\"text-4xl font-bold mb-4\">Motus</h1>\r\n        {message && (\r\n          <p className={`mb-4 ${message.startsWith('Congratulations') ? 'text-green-500' : 'text-red-500'} text-2xl font-semibold`}>\r\n            {message}\r\n          </p>\r\n        )}\r\n        {scoreMessage && (\r\n          <p className=\"mb-4 text-2xl font-semibold\" dangerouslySetInnerHTML={{ __html: scoreMessage }}></p>\r\n        )}\r\n        <p className=\"mb-4 font-semibold text-xl\">Le mot à deviner commence par : {word && word.charAt(0)}</p>\r\n        <div className=\"grid gap-2 justify-center\">\r\n          {attempts.map((attempt, rowIndex) => (\r\n            <div key={rowIndex} className=\"flex gap-2\">\r\n              {renderRow(attempt, rowIndex)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {gameOver && (\r\n          <button onClick={handleRestart} className=\"mt-4 px-4 py-2 bg-green-500 hover:bg-green-700 text-white font-semibold rounded\">\r\n            Recommencer\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAO,KAAKC,aAAa,MAAM,qCAAqC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAACgB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EAC3D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC0B,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC4B,UAAU,EAAEC,aAAa,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC8B,KAAK,EAAEC,QAAQ,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACgC,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMkC,QAAQ,GAAG9B,WAAW,CAAC,CAAC;EAE9B,MAAM+B,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,MAAM,CAAC,CAAC;EACjE,MAAMC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,MAAME,SAAS,GAAGrC,MAAM,CAAC,EAAE,CAAC;EAC5B,MAAMsC,OAAO,GAAGtC,MAAM,CAAC,IAAI,CAAC;EAE5BD,SAAS,CAAC,MAAM;IACd,MAAMwC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMvC,KAAK,CAACwC,GAAG,CAAC,uCAAuC,EAAE;UACnEC,MAAM,EAAE;YAAET;UAAW;QACvB,CAAC,CAAC;QACFU,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,GAAG,CAACK,IAAI,CAAC,CAAC,CAAC;QACxC,MAAMC,WAAW,GAAGN,GAAG,CAACK,IAAI,CAACnC,IAAI,CAACqC,WAAW,CAAC,CAAC;QAC/CpC,OAAO,CAACmC,WAAW,CAAC;QACpB;QACA,MAAME,eAAe,GAAGlC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC+B,WAAW,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5DpC,WAAW,CAACmC,eAAe,CAAC;MAC9B,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZP,OAAO,CAAC3B,KAAK,CAAC,sBAAsB,EAAEkC,GAAG,CAAC;QAC1CjC,QAAQ,CAAC,2BAA2B,CAAC;MACvC;IACF,CAAC;IAEDsB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACN,UAAU,CAAC,CAAC;EAEhBlC,SAAS,CAAC,MAAM;IACd,MAAMoD,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMX,GAAG,GAAG,MAAMvC,KAAK,CAACwC,GAAG,CAAC,sCAAsC,EAAE;UAClEW,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUjB,KAAK;UAChC;QACF,CAAC,CAAC;QACFP,QAAQ,CAACW,GAAG,CAACK,IAAI,CAACjB,KAAK,CAAC;MAC1B,CAAC,CAAC,OAAOsB,GAAG,EAAE;QACZP,OAAO,CAAC3B,KAAK,CAAC,uBAAuB,EAAEkC,GAAG,CAAC;MAC7C;IACF,CAAC;IAEDC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACf,KAAK,CAAC,CAAC;EAEX,MAAMkB,iBAAiB,GAAGA,CAACC,CAAC,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IACnD,MAAMC,KAAK,GAAGH,CAAC,CAACI,MAAM,CAACD,KAAK,CAACX,WAAW,CAAC,CAAC;IAC1C,IAAIW,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC;IAC9B,MAAMC,WAAW,GAAGjD,QAAQ,CAACkD,KAAK,CAAC,CAAC;IACpCD,WAAW,CAACL,QAAQ,CAAC,GAAGK,WAAW,CAACL,QAAQ,CAAC,CAACO,KAAK,CAAC,EAAE,CAAC;IACvDF,WAAW,CAACL,QAAQ,CAAC,CAACC,QAAQ,CAAC,GAAGC,KAAK;IACvCG,WAAW,CAACL,QAAQ,CAAC,GAAGK,WAAW,CAACL,QAAQ,CAAC,CAACQ,IAAI,CAAC,EAAE,CAAC;IACtDnD,WAAW,CAACgD,WAAW,CAAC;;IAExB;IACA,MAAMI,SAAS,GAAGR,QAAQ,GAAG,CAAC;IAC9B,IAAIQ,SAAS,GAAGvD,IAAI,CAACkD,MAAM,IAAIF,KAAK,EAAE;MACpCrB,SAAS,CAAC6B,OAAO,CAACV,QAAQ,CAAC,CAACS,SAAS,CAAC,CAACE,KAAK,CAAC,CAAC;IAChD;EACF,CAAC;EAED,MAAMC,aAAa,GAAGA,CAACb,CAAC,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IAC/C,IAAIF,CAAC,CAACc,GAAG,KAAK,OAAO,EAAE;MACrBC,YAAY,CAACf,CAAC,CAAC;IACjB,CAAC,MAAM,IAAIA,CAAC,CAACc,GAAG,KAAK,WAAW,IAAIZ,QAAQ,GAAG,CAAC,EAAE;MAChD,MAAMI,WAAW,GAAGjD,QAAQ,CAACkD,KAAK,CAAC,CAAC;MACpCD,WAAW,CAACL,QAAQ,CAAC,GAAGK,WAAW,CAACL,QAAQ,CAAC,CAACO,KAAK,CAAC,EAAE,CAAC;MACvDF,WAAW,CAACL,QAAQ,CAAC,CAACC,QAAQ,CAAC,GAAG,EAAE;MACpCI,WAAW,CAACL,QAAQ,CAAC,GAAGK,WAAW,CAACL,QAAQ,CAAC,CAACQ,IAAI,CAAC,EAAE,CAAC;MACtDnD,WAAW,CAACgD,WAAW,CAAC;MAExB,MAAMU,SAAS,GAAGd,QAAQ,GAAG,CAAC;MAC9BpB,SAAS,CAAC6B,OAAO,CAACV,QAAQ,CAAC,CAACe,SAAS,CAAC,CAACJ,KAAK,CAAC,CAAC;IAChD;EACF,CAAC;EAED,MAAMG,YAAY,GAAG,MAAOf,CAAC,IAAK;IAChCA,CAAC,CAACiB,cAAc,CAAC,CAAC;IAClB,MAAMC,cAAc,GAAG7D,QAAQ,CAACQ,UAAU,CAAC;IAC3C,IAAIqD,cAAc,CAACb,MAAM,KAAKlD,IAAI,CAACkD,MAAM,EAAE;IAE3C,IAAIc,MAAM,GAAG,CAAC;IAEd,IAAID,cAAc,KAAK/D,IAAI,EAAE;MAC3BS,UAAU,CAAC,wCAAwC,CAAC;MACpDI,WAAW,CAAC,IAAI,CAAC;MACjBE,eAAe,CAAC,IAAI,CAAC;MACrBiD,MAAM,GAAG,EAAE,CAAC,CAAC;IACf,CAAC,MAAM,IAAItD,UAAU,IAAI,CAAC,EAAE;MAC1BD,UAAU,CAAC,2BAA2BT,IAAI,EAAE,CAAC;MAC7Ca,WAAW,CAAC,IAAI,CAAC;MACjBI,aAAa,CAAC,IAAI,CAAC;MACnBgD,UAAU,CAAC,MAAMhD,aAAa,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MAC9C+C,MAAM,GAAG,CAAC,CAAC,CAAC;IACd,CAAC,MAAM;MACLrD,aAAa,CAACD,UAAU,GAAG,CAAC,CAAC;MAC7B;MACAuD,UAAU,CAAC,MAAM;QACftC,SAAS,CAAC6B,OAAO,CAAC9C,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC+C,KAAK,CAAC,CAAC;MAC9C,CAAC,EAAE,GAAG,CAAC;MACP;IACF;IAEA,MAAMS,WAAW,CAACF,MAAM,CAAC;;IAEzB;IACA7C,QAAQ,CAACgD,SAAS,IAAI;MACpB,MAAMC,QAAQ,GAAGD,SAAS,GAAGH,MAAM;MACnC3C,eAAe,CAAC,iEAAiE+C,QAAQ,SAAS,CAAC;MACnG,OAAOA,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMF,WAAW,GAAG,MAAOF,MAAM,IAAK;IACpC,MAAMtC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI;MACF,MAAMlC,KAAK,CAAC8E,IAAI,CAAC,sCAAsC,EAAE;QAAEL;MAAO,CAAC,EAAE;QACnEtB,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUjB,KAAK;QAChC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACd2B,OAAO,CAAC3B,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdiF,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEb,aAAa,CAAC;IACjD,OAAO,MAAM;MACXY,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEd,aAAa,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACE,YAAY,CAAC,CAAC;EAElB,MAAMa,cAAc,GAAGA,CAACC,MAAM,EAAEC,KAAK,EAAE7B,QAAQ,KAAK;IAElD,MAAM8B,iBAAiB,GAAG,CAAC,CAAC;IAC5B,MAAMC,aAAa,GAAG,IAAIzE,KAAK,CAACJ,IAAI,CAACkD,MAAM,CAAC,CAAC7C,IAAI,CAAC,CAAC,CAAC;IACpD,MAAMyE,YAAY,GAAG,IAAI1E,KAAK,CAACJ,IAAI,CAACkD,MAAM,CAAC,CAAC7C,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;IAEzD;IACA,KAAK,IAAI0E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/E,IAAI,CAACkD,MAAM,EAAE6B,CAAC,EAAE,EAAE;MACpC,MAAMC,IAAI,GAAGhF,IAAI,CAAC+E,CAAC,CAAC;MACpB,IAAI,CAACH,iBAAiB,CAACI,IAAI,CAAC,EAAE;QAC5BJ,iBAAiB,CAACI,IAAI,CAAC,GAAG,CAAC;MAC7B;MACAJ,iBAAiB,CAACI,IAAI,CAAC,EAAE;IAC3B;;IAEA;IACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/E,IAAI,CAACkD,MAAM,EAAE6B,CAAC,EAAE,EAAE;MACpC,MAAMC,IAAI,GAAG9E,QAAQ,CAAC4C,QAAQ,CAAC,CAACiC,CAAC,CAAC;MAClC,IAAI/E,IAAI,CAAC+E,CAAC,CAAC,KAAKC,IAAI,EAAE;QACpBF,YAAY,CAACC,CAAC,CAAC,GAAG,IAAI;QACtBH,iBAAiB,CAACI,IAAI,CAAC,EAAE;MAC3B;IACF;;IAEA;IACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/E,IAAI,CAACkD,MAAM,EAAE6B,CAAC,EAAE,EAAE;MACpC,MAAMC,IAAI,GAAG9E,QAAQ,CAAC4C,QAAQ,CAAC,CAACiC,CAAC,CAAC;MAClC,IAAI,CAACD,YAAY,CAACC,CAAC,CAAC,IAAI/E,IAAI,CAACiF,QAAQ,CAACD,IAAI,CAAC,IAAIJ,iBAAiB,CAACI,IAAI,CAAC,GAAG,CAAC,EAAE;QAC1EH,aAAa,CAACE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtBH,iBAAiB,CAACI,IAAI,CAAC,EAAE;MAC3B;IACF;;IAEA;IACA,IAAIF,YAAY,CAACH,KAAK,CAAC,EAAE;MACvB,OAAO,uBAAuB;IAChC;;IAEA;IACA,IAAIE,aAAa,CAACF,KAAK,CAAC,KAAK,CAAC,EAAE;MAC9B,OAAO,0BAA0B;IACnC;;IAEA;IACA,OAAO,wBAAwB;EACjC,CAAC;EAGD,MAAMO,SAAS,GAAGA,CAACC,OAAO,EAAErC,QAAQ,KAAK;IACvC,MAAMsC,OAAO,GAAGD,OAAO,CAAC9B,KAAK,CAAC,EAAE,CAAC,CAACgC,MAAM,CAACjF,KAAK,CAACJ,IAAI,CAACkD,MAAM,GAAGiC,OAAO,CAACjC,MAAM,CAAC,CAAC7C,IAAI,CAAC,EAAE,CAAC,CAAC;IACtF,oBACER,OAAA;MAAoByF,SAAS,EAAC,2BAA2B;MAAAC,QAAA,EACtDH,OAAO,CAACI,GAAG,CAAC,CAACd,MAAM,EAAE3B,QAAQ,kBAC5BlD,OAAA;QAEE4F,IAAI,EAAC,MAAM;QACXC,SAAS,EAAC,GAAG;QACb1C,KAAK,EAAE0B,MAAO;QACdiB,QAAQ,EAAG9C,CAAC,IAAKD,iBAAiB,CAACC,CAAC,EAAEC,QAAQ,EAAEC,QAAQ,CAAE;QAC1D6C,SAAS,EAAG/C,CAAC,IAAKa,aAAa,CAACb,CAAC,EAAEC,QAAQ,EAAEC,QAAQ,CAAE;QACvDuC,SAAS,EAAE,yIAAyIxC,QAAQ,GAAGpC,UAAU,IAAIE,QAAQ,GAAG6D,cAAc,CAACC,MAAM,EAAE3B,QAAQ,EAAED,QAAQ,CAAC,GAAG,EAAE,EAAG;QAC1O+C,QAAQ,EAAE/C,QAAQ,KAAKpC,UAAU,IAAIE,QAAS;QAC9CkF,GAAG,EAAEC,EAAE,IAAIpE,SAAS,CAAC6B,OAAO,CAACV,QAAQ,CAAC,GAAGnB,SAAS,CAAC6B,OAAO,CAACV,QAAQ,CAAC,CAACC,QAAQ,CAAC,GAAGgD,EAAE,GAAGpE,SAAS,CAAC6B,OAAO,CAACV,QAAQ,CAAC,GAAG;UAAE,CAACC,QAAQ,GAAGgD;QAAG;MAAE,GARlIhD,QAAQ;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASd,CACF;IAAC,GAbMrD,QAAQ;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAcb,CAAC;EAEV,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B9E,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;EAC3B,CAAC;EAED,IAAIhB,KAAK,EAAE;IACT,oBAAOT,OAAA;MAAGyF,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAEjF;IAAK;MAAA0F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAChD;EAEA,oBACEtG,OAAA;IAAKyF,SAAS,EAAC,2DAA2D;IAAAC,QAAA,GACvEzE,YAAY,iBAAIjB,OAAA,CAACJ,QAAQ;MAAAuG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC5BnF,UAAU,iBACTnB,OAAA;MAAKyF,SAAS,EAAC,4EAA4E;MAACe,OAAO,EAAEA,CAAA,KAAMpF,aAAa,CAAC,KAAK,CAAE;MAAAsE,QAAA,eAC9H1F,OAAA,CAACH,MAAM;QAAC4G,OAAO,EAAE;UACfC,IAAI,EAAE,KAAK;UACXC,QAAQ,EAAE,IAAI;UACd7G,aAAa,EAAEA,aAAa;UAC5B8G,gBAAgB,EAAE;YAChBC,mBAAmB,EAAE;UACvB;QACF,CAAE;QACAC,MAAM,EAAE,GAAI;QACZC,KAAK,EAAE;MAAI;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,eACDtG,OAAA;MAAKyF,SAAS,EAAC,mDAAmD;MAAAC,QAAA,gBAChE1F,OAAA;QAAIyF,SAAS,EAAC,yBAAyB;QAAAC,QAAA,EAAC;MAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACjD3F,OAAO,iBACNX,OAAA;QAAGyF,SAAS,EAAE,QAAQ9E,OAAO,CAACqG,UAAU,CAAC,iBAAiB,CAAC,GAAG,gBAAgB,GAAG,cAAc,yBAA0B;QAAAtB,QAAA,EACtH/E;MAAO;QAAAwF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CACJ,EACA/E,YAAY,iBACXvB,OAAA;QAAGyF,SAAS,EAAC,6BAA6B;QAACwB,uBAAuB,EAAE;UAAEC,MAAM,EAAE3F;QAAa;MAAE;QAAA4E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAClG,eACDtG,OAAA;QAAGyF,SAAS,EAAC,4BAA4B;QAAAC,QAAA,GAAC,qCAAgC,EAACvF,IAAI,IAAIA,IAAI,CAACuC,MAAM,CAAC,CAAC,CAAC;MAAA;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtGtG,OAAA;QAAKyF,SAAS,EAAC,2BAA2B;QAAAC,QAAA,EACvCrF,QAAQ,CAACsF,GAAG,CAAC,CAACL,OAAO,EAAErC,QAAQ,kBAC9BjD,OAAA;UAAoByF,SAAS,EAAC,YAAY;UAAAC,QAAA,EACvCL,SAAS,CAACC,OAAO,EAAErC,QAAQ;QAAC,GADrBA,QAAQ;UAAAkD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEb,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EACLvF,QAAQ,iBACPf,OAAA;QAAQwG,OAAO,EAAED,aAAc;QAACd,SAAS,EAAC,iFAAiF;QAAAC,QAAA,EAAC;MAE5H;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpG,EAAA,CA5QID,IAAI;EAAA,QAYSN,WAAW;AAAA;AAAAwH,EAAA,GAZxBlH,IAAI;AA8QV,eAAeA,IAAI;AAAC,IAAAkH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}